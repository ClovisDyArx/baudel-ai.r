import streamlit as st
import requests
import base64
import json

with open("translations.json", "r") as file:
    translations = json.load(file)

language = st.sidebar.selectbox("Select Language :", ["English", "Fran√ßais", "Espa√±ol", "Deutsch", "‰∏≠Êñá", "Êó•Êú¨Ë™û", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "‡πÑ‡∏ó‡∏¢", "–†—É—Å—Å–∫–∏–π"])
t = translations[language]

st.sidebar.markdown("""
    ***Disclaimer:***
    These translations were generated by AI.
    Any inaccuracies are unintentional :)
""")

st.sidebar.page_link("https://github.com/ClovisDyArx/baudel-ai.r", label="GitHub's repo", icon="‚≠ê")
st.sidebar.page_link("https://github.com/ClovisDyArx", label="my GitHub", icon="üë®‚Äçüíª")

st.title(t["title"])
st.write(t["description"])

token = st.text_input(t["enter_token"], type="password")
uploaded_image = st.file_uploader(t["upload_image"], type=["jpg", "png"])
recipient_name = st.text_input(t["recipient_name"])
custom_message = st.text_input(t["custom_message"])
additional_context = st.text_area(t["additional_context"])

if 'generated_text' not in st.session_state:
    st.session_state.generated_text = None
    st.session_state.audio_file = None

if st.button(t["generate_button"]):
    if not recipient_name:
        st.error(t["error_no_name"])
    elif not token:
        st.error(t["error_no_token"])
    else:
        prompt = f"Write a love letter to {recipient_name}. It must be written in {language}."
        if custom_message:
            prompt += f" Include the following: {custom_message}."
        if additional_context:
            prompt += f" Additional context: {additional_context}."

        image_data = []
        if uploaded_image:
            image_data.append(base64.b64encode(uploaded_image.read()).decode('utf-8'))
            prompt += " Use the provided image to inspire your letter. If it's a person, describe it accurately in the poem while complimenting them."

        payload = {
            "model": "llava:13b",
            "prompt": prompt,
            "images": image_data
        }

        headers = {
            "Authorization": f"Bearer {token}"
        }

        try:
            response = requests.post("http://fastapi_backend:8000/generate", json=payload, headers=headers)
            response.raise_for_status()

            response_data = response.json()

            if "text" in response_data:
                st.subheader(t["result_title"])
                st.session_state.generated_text = response_data["text"]
                st.write(st.session_state.generated_text)
            else:
                st.error(t["error_no_text"])

        except requests.exceptions.RequestException as e:
            st.error(f"{t['error_backend']} {e}")

if st.session_state.generated_text:
    if st.button("üîä Text-to-Speech", key="tts_button"):
        tts_response = requests.post(
            "http://fastapi_backend:8000/tts",
            json={"text": st.session_state.generated_text, "language": t["tts_language"]}
        )

        st.subheader(t["result_title"])
        st.write(st.session_state.generated_text)

        if tts_response.status_code == 200:
            audio_file = "output.mp3"
            with open(audio_file, "wb") as f:
                f.write(tts_response.content)

            st.session_state.audio_file = audio_file
            st.audio(audio_file, format="audio/mp3")
        else:
            st.error("Error generating audio.")
